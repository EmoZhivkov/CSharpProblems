#!/bin/bash

if [[ $# -ne 3 ]]
then
	echo "Usage: [file] [key1] [key2]"
	exit 1
fi

if [[ ! -f $1 ]]
then
	echo "$1 is not a file"
	exit 1
fi

if [[ ! -r $1 ]]
then
	echo "$1 is not readable"
	exit 1
fi

keyOneLine=$(grep -E "^${2}=" $1)
keyTwoLine=$(grep -E "^${3}=" $1)

if [[ -z $keyOneLine ]]
then
	echo "First key ($2) is missing, nothing to edit"
	exit 0
fi

if [[ -z $keyTwoLine ]]
then
	echo "Second key ($3) is missing, nothing to edit"
	exit 0
fi

firstTerms=$(echo "$keyOneLine" | sed -E 's_^[^=]+=[[:space:]]*(.*)_\1_' | sed -E 's_[[:space:]]+_\n_g')
secondTerms=$(echo "$keyTwoLine" | sed -E 's_^[^=]+=[[:space:]]*(.*)_\1_' | sed -E 's_[[:space:]]+_\n_g')

#echo "first terms:"
#echo "$firstTerms"

#echo "second terms:"
#echo "$secondTerms"

comm -13 <(echo "$firstTerms" | sort) <(echo "$secondTerms" | sort) | xargs

IFS=$'\n'
for term in $secondTerms
do
	if [[ 0 -eq $(echo "$firstTerms" | grep -cx "$term") ]]
	then
		newTerms="$newTerms $term"
	else
		echo "$term is contained in first key, removing"
	fi
done

newTerms=$(echo "$newTerms" | sed -E 's_[ ]+__')
newSecondKey="${3}=$newTerms"

#echo "$newSecondKey"

#sed -E --in-place "s/^${3}=.*/$newSecondKey/" "$1"