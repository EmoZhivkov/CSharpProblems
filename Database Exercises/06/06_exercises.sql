select MOVIE.TITLE, MOVIE.YEAR, MOVIE.LENGTH
FROM MOVIE
WHERE YEAR < 2000 AND (LENGTH > 120 OR LENGTH IS NULL) 

SELECT MOVIESTAR.NAME, MOVIESTAR.GENDER
FROM MOVIESTAR
WHERE NAME LIKE 'J%' AND BIRTHDATE > 1948
ORDER BY NAME DESC

SELECT STUDIO.NAME, COUNT(DISTINCT STARSIN.STARNAME)
FROM STUDIO JOIN MOVIE ON STUDIO.NAME = MOVIE.STUDIONAME
            JOIN STARSIN ON STARSIN.MOVIETITLE = MOVIE.TITLE
GROUP BY STUDIO.NAME

SELECT STARSIN.STARNAME, COUNT(MOVIE.TITLE)
FROM MOVIE JOIN STARSIN ON MOVIE.TITLE = STARSIN.MOVIETITLE
GROUP BY STARNAME

SELECT * FROM MOVIE

SELECT STUDIONAME, TITLE, YEAR
FROM MOVIE M1 
WHERE YEAR >= ALL (SELECT YEAR FROM MOVIE M2 WHERE
                    M1.STUDIONAME = M2.STUDIONAME)

SELECT NAME 
FROM MOVIESTAR 
WHERE NAME = (SELECT NAME FROM MOVIESTAR WHERE BIRTHDATE = (SELECT MIN(BIRTHDATE) FROM MOVIESTAR WHERE GENDER = 'M') )


SELECT * FROM (
    SELECT STUDIONAME, STARSIN.STARNAME, COUNT(MOVIE.TITLE) AS NUM_MOVIES
    FROM MOVIE JOIN STARSIN ON MOVIE.TITLE = STARSIN.MOVIETITLE
    GROUP BY STUDIONAME, STARNAME
) M1 WHERE M1.NUM_MOVIES = (SELECT MAX(NUM_MOVIES)
                            FROM (SELECT STUDIONAME, STARSIN.STARNAME, COUNT(MOVIE.TITLE) AS NUM_MOVIES
    FROM MOVIE JOIN STARSIN ON MOVIE.TITLE = STARSIN.MOVIETITLE
    GROUP BY STUDIONAME, STARNAME) M2)

SELECT * FROM (
    SELECT MOVIE.TITLE, MOVIE.YEAR, COUNT(STARSIN.STARNAME) AS NUM_ACTORS
    FROM MOVIE JOIN STARSIN ON MOVIE.TITLE = STARSIN.MOVIETITLE
    GROUP BY MOVIE.TITLE, MOVIE.YEAR
) M1 WHERE NUM_ACTORS > 2

SELECT DISTINCT SHIPS.NAME
FROM SHIPS JOIN OUTCOMES ON SHIPS.NAME = OUTCOMES.SHIP
WHERE SHIPS.NAME LIKE 'C%' OR SHIPS.NAME LIKE 'K%'

SELECT * FROM OUTCOMES

SELECT DISTINCT SHIPS.NAME, CLASSES.COUNTRY
FROM CLASSES JOIN SHIPS ON CLASSES.CLASS = SHIPS.CLASS
             LEFT OUTER JOIN OUTCOMES ON SHIPS.NAME = OUTCOMES.SHIP
WHERE OUTCOMES.RESULT != 'sunk' OR OUTCOMES.RESULT IS NULL

SELECT CLASSES.COUNTRY, COUNT(SHIP) AS NUM_SHIPS
FROM (CLASSES LEFT JOIN SHIPS ON CLASSES.CLASS = SHIPS.CLASS)
             LEFT JOIN OUTCOMES ON SHIPS.NAME = OUTCOMES.SHIP
WHERE OUTCOMES.RESULT = 'sunk' OR SHIP IS NULL
GROUP BY CLASSES.COUNTRY


SELECT BATTLE FROM (
SELECT BATTLE, COUNT(SHIP) AS SHIP_COUNT
FROM SHIPS JOIN OUTCOMES ON SHIPS.NAME = OUTCOMES.SHIP
GROUP BY BATTLE
) M WHERE M.SHIP_COUNT > (SELECT SHIP_COUNT FROM 
    (SELECT BATTLE, COUNT(SHIP) AS SHIP_COUNT
    FROM SHIPS JOIN OUTCOMES ON SHIPS.NAME = OUTCOMES.SHIP
    GROUP BY BATTLE ) M1
    WHERE M1.BATTLE = 'Guadalcanal')


SELECT BATTLE FROM 
(SELECT BATTLE, COUNT(CLASSES.COUNTRY) AS COUNTR_COUNT
FROM CLASSES JOIN SHIPS ON CLASSES.CLASS = SHIPS.CLASS
             JOIN OUTCOMES ON SHIPS.NAME = OUTCOMES.SHIP
GROUP BY BATTLE) M WHERE M.COUNTR_COUNT > (
    SELECT COUNTR_COUNT FROM
    (SELECT BATTLE, COUNT(CLASSES.COUNTRY) AS COUNTR_COUNT
    FROM CLASSES JOIN SHIPS ON CLASSES.CLASS = SHIPS.CLASS
                 JOIN OUTCOMES ON SHIPS.NAME = OUTCOMES.SHIP
    GROUP BY BATTLE) M2 WHERE BATTLE = 'Surigao Strait'
)

SELECT NAME, DISPLACEMENT, NUMGUNS
FROM CLASSES C JOIN SHIPS S ON C.CLASS = S.CLASS
WHERE DISPLACEMENT <= ALL(SELECT DISPLACEMENT FROM CLASSES) AND NUMGUNS >= ALL (SELECT NUMGUNS FROM CLASSES WHERE DISPLACEMENT = C.DISPLACEMENT)

SELECT SHIP as num_ships
FROM BATTLES JOIN OUTCOMES o ON NAME = BATTLE 
WHERE RESULT = 'damaged' 
AND DATE <= ANY (SELECT DATE 
                 FROM BATTLES JOIN OUTCOMES o1 ON NAME = BATTLE 
                 WHERE o1.RESULT='ok' and o.SHIP = o1.SHIP and 
                 NAME = ANY (
                     SELECT NAME
                     FROM BATTLES JOIN OUTCOMES A ON NAME = BATTLE
                     GROUP BY NAME
                     HAVING COUNT(SHIP) > (
                         SELECT COUNT(SHIP)
                         FROM OUTCOMES JOIN BATTLES B ON NAME = BATTLE
                         WHERE NAME = B.NAME
                         GROUP BY NAME
                     )
                 ))

SELECT product.model, laptop.code, laptop.screen
from product join laptop on product.model = laptop.model
where screen = 11 or screen = 15


select distinct model from pc 
where price < (select MIN(price) from laptop)

select product.model from product join 
(select model, price from laptop
UNION
select model, price from pc) a on product.model = a.model

select product.model
from product pr join pc on pr.model = pc.model
where pc.price < ALL( select laptop.price
                      from laptop join product pr1 on laptop.model = pr1.model
                      where pr.maker = pr1.maker )
