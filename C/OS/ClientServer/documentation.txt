Документация

API
    - в диреторията на проекта рънваме make
    - пускаме сървъра с аргумент файла, в който ще пазим инфото за сметките
        - ./server test.bin
    - пускаме клиент с аргумент идентификатора на сметката(А-Н)
        - ./client A
    - получаваме информация от сървъра, колко пари има останали в тази сметка
    и каква транзакция искаме да направим
        - ако искаме да добавим пари, просто изписваме сумата, която искаме да добавим (Напр.: 3)
        - ако искаме да извадим, изписваме сумата с минус отпред (Напр.: -3)
    - има възможност за пускане на множество клиенти едновременно, като чрез семафори са
    наложени ограниченията, за да може само един клиент да работи със сървъра едновременно

Примерен сценарии:
    - make
    - ./server test.bin

    - ./client A
      Account A has 112 left in it. What transaction would you like to make:
      112

    - ./client A
      Account A has 224 left in it. What transaction would you like to make:
      -10
      .
      .
      .

Принцип на работа:
    - сървъра проверява дали има нужния брой аргументи
    - след това проверява дали файлът съществува
        - ако съществува -> чете информацията за сметките
        - ако не -> създава файла и нулира сметките
    - след това сървърът инициализира семафорите нужни за комуникацията с клиентите
    и споделената памет, като накрая увеличава мутекс семафората с едно, за да може
    да сигнализира на клиентите, че всичко е инициализирано правилно
    - от другата страна като включим клиент, преди да отвори всичките нужни семафори
    той отваря само мутекса и изчаква мутекса да получи сигнал от сървъра или от следващия
    клиент, че всичко е точно
    - щом получи сигнала отваря всички семафори и споделената памет
    - същевременно в един while цикъл сървърът изчаква сигнал от клиента, че може да чете
    от споделената памет
    - клиентът създава примерна структура със инфо за сметката и я записва в споделената памет,
    като, разбира се, преди това се съобразяваме с това, колко е голяма структурата и колко памет
    трябва да заделим
    - след като я запише чрез memcpy, сигнализира на сървъра, че може да чете от паметта чрез
    семафората spool_signal_sem и също така изчаква take_from_bank_sem като сигнал от сървъра,
    че е приключил проверката на сметката и писането в споделената памет
    - spool_signal_sem вече е сигнализирана и сървърът може да провери каква информация има в
    споделената памет и прави проверка дали сметката съществува. Ако съществува, записва в
    споделената памет колко пари има в дадената банкова сметка, ако не, записва в транзакцията на
    споделената памет -1, сигнализира take_from_bank_sem и изпуска итерацията на цикъла, тъй като
    трябва да започне отначало. Ако всичко е точно сигнализира take_from_bank_sem,
    за да може клиента да разбере, че може да прочете какво се е случило след изпращането на сметката,
    и изчаква signal_spool_sem, като сигнал от клиента, че е готов с новата заявка.
    - клиента проверява дали транзакцията в споделената памет е -1. Ако е, отпуска мутекса, за да може
    други клиенти да се свързват и връща грешка, ако не, то значи идентификатора за сметката е правилен.
    - иска число от стандартния вход и аналогично сетва транзакцията и я копира в споделената памет.
    - след това аналогично сигнализира spool_signal_sem и изчаква take_from_bank_sem
    - сървърът от своя страна получава вече може да провери числото получено за транзакция
    - първо проверява дали числото е в рамките на int16 по условие, ако не е, аналогично като отгоре
    записва -1, сигнализира и изпуска итерация, ако е, проверява дали след транзакцията текущата сметка ще
    излезе от рамките на uint32 по условие. Ако не е, аналогично като отгоре записва -1, сигнализира и
    изпуска итерация. Ако всичко е точно записва 0 в транзакцията, изпълнява транзакцията,
    записва новата информация във файла и сигнализира take_from_bank_sem, че е готов
    с изпълнението на заявката.
    - от другата страна клиента получава сигнала и проверява дали транзакцията е -1, ако е, то
    освобождава мутекса, за да може други клиенти да се свързват, и връща грешка.
    Ако транзакцията не е -1 -> всичко е точно и транзакцията е минала. Сигнализира мутекса
    и приключва работа с нулев код.

Източници:
    Работа със споделена памет:
        - https://www.geeksforgeeks.org/ipc-shared-memory/
        - https://www.geeksforgeeks.org/posix-shared-memory-api/
        - https://www.tutorialspoint.com/inter_process_communication/inter_process_communication_shared_memory.htm
        
    Работа със семафори:
        - https://www.geeksforgeeks.org/use-posix-semaphores-c/
        - https://stackoverflow.com/questions/368322/differences-between-system-v-and-posix-semaphores
